import os
from threading import Thread
from flask import Flask
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor

# –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –∏ chat id –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get("TOKEN") or "8053516713:AAHiRPoKBXqqV6vZpChX2W8nAhFswB5TQ64"
GROUP_CHAT_ID = int(os.environ.get("GROUP_CHAT_ID") or -4886669467)

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class Form(StatesGroup):
    full_name = State()
    birth_date = State()
    problem = State()
    phone = State()

# Flask keep-alive
app = Flask("")

@app.route("/")
def home():
    return "Bot is running"

def run_flask():
    app.run(host="0.0.0.0", port=8080)

def keep_alive():
    t = Thread(target=run_flask)
    t.start()

# /start - show consent
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    consent_text = (
        "–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "–ú—ã –±—É–¥–µ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤–∞—à–µ –§–ò–û, –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è, –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤—è–∑–∏ –∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é."
    )
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("–°–æ–≥–ª–∞—Å–µ–Ω(–∞)", callback_data="consent_yes"),
        types.InlineKeyboardButton("–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω(–∞)", callback_data="consent_no"),
    )
    await message.answer(consent_text, reply_markup=keyboard)

# Consent handlers
@dp.callback_query_handler(lambda c: c.data == "consent_no")
async def consent_no_handler(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start.")
    
@dp.callback_query_handler(lambda c: c.data == "consent_yes")
async def consent_yes_handler(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,
                           "–°–ø–∞—Å–∏–±–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.\n\n1Ô∏è‚É£ –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–§–∞–º–∏–ª–∏—è, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ)")
    await Form.full_name.set()

@dp.message_handler(state=Form.full_name)
async def process_fullname(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer("2Ô∏è‚É£ –í–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (—á–∏—Å–ª–æ, –º–µ—Å—è—Ü, –≥–æ–¥):")
    await Form.birth_date.set()

@dp.message_handler(state=Form.birth_date)
async def process_birth(message: types.Message, state: FSMContext):
    await state.update_data(birth_date=message.text)
    await message.answer(
        "3Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∫—Ä–∞—Ç–∫–æ.\n"
        "–ï—Å–ª–∏ –µ—Å—Ç—å –¥–∏–∞–≥–Ω–æ–∑ ‚Äî —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ (–ø—Ä–∏–º–µ—Ä: ¬´—É–ø–ª–æ—Ç–Ω–µ–Ω–∏–µ –≤ –≥—Ä—É–¥–∏¬ª)."
    )
    await Form.problem.set()

@dp.message_handler(state=Form.problem)
async def process_problem(message: types.Message, state: FSMContext):
    await state.update_data(problem=message.text)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä (–∫–æ–Ω—Ç–∞–∫—Ç)", request_contact=True))
    await message.answer("4Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –Ω–∞—à–µ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É):", reply_markup=kb)
    await Form.phone.set()

@dp.message_handler(content_types=types.ContentType.CONTACT, state=Form.phone)
async def process_phone_contact(message: types.Message, state: FSMContext):
    phone = message.contact.phone_number
    await state.update_data(phone=phone)
    await finish_and_send(message, state)

@dp.message_handler(state=Form.phone)
async def process_phone_text(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await finish_and_send(message, state)

async def finish_and_send(message: types.Message, state: FSMContext):
    data = await state.get_data()
    text = (
        "üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
        f"üë§ –§–ò–û: {data.get('full_name','')}\n"
        f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data.get('birth_date','')}\n"
        f"üìù –ü—Ä–æ–±–ª–µ–º–∞: {data.get('problem','')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone','')}"
    )
    try:
        await bot.send_message(chat_id=GROUP_CHAT_ID, text=text)
    except Exception:
        # –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ª–∏—á–∫—É –≤–ª–∞–¥–µ–ª—å—Ü—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å GROUP_CHAT_ID
        pass
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –Ω–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.", reply_markup=types.ReplyKeyboardRemove())
    await state.finish()

if __name__ == "__main__":
    keep_alive()
    executor.start_polling(dp, skip_updates=True)
